LEKCJA 1.
1.
CREATE TABLE postac (id_postaci INT PRIMARY KEY auto_increment, nazwa VARCHAR(40), rodzaj ENUM('wiking','ptak','kobieta'), data_ur DATE, wiek INT UNSIGNED);
INSERT INTO postac VALUES (NULL, 'Bjorn', 'wiking', '1990-01-10', '30');
CREATE TABLE postac VALUES (NULL, 'Drozd', 'ptak', '2000-01-02, '20');
CREATE TABLE postac VALUES (NULL, 'Tesciowa', 'kobieta', '1932-03-13', '80');
UPDATE postac SET wiek=88 WHERE nazwa = 'Tesciowa';
_____________________________________________________
2.
CREATE TABLE walizka (id_walizki INT auto_increment PRIMARY KEY, pojemnosc INT UNSIGNED, kolor ENUM('rozowy','czerwony','teczowy','zolty'), id_wlasciciela INT, FOREIGN KEY (id_wlasciciela) REFERENCES postac (id_postaci));
ALTER TABLE walizka DROP FOREIGN KEY walizka_ibfk_1;
ALTER TABLE walizka ADD FOREIGN KEY (id_wlasciciela) REFERENCES postac (id_postaci) ON DELETE CASCADE;
ALTER TABLE walizka ALTER kolor set DEFAULT 'rozowy';
INSERT INTO walizka VALUES (DEFAULT, 30, 'czerwony', 1);
INSERT INTO walizka VALUES (DEFAULT, 30, DEFAULT, 2);
_____________________________________________________
3.
CREATE TABLE izba (adres_budynku VARCHAR(50), nazwa_izby VARCHAR(40), metraz INT UNSIGNED, wlasciciel INT, PRIMARY KEY (adres_budynku, nazwa_izby), FOREIGN KEY (wlasciciel) REFERENCES postac(id_postaci) ON DELETE SET NULL);
ALTER TABLE izba ADD kolor_izby VARCHAR(40) DEFAULT 'czarny' AFTER metraz;
INSERT INTO izba VALUES ('Lesna 8', 'Spizarnia', 15, DEFAULT, 1);
_____________________________________________________
4.
CREATE TABLE przetwory (id_przetworu INT PRIMARY KEY auto_increment, rok_produkcji INT DEFAULT 1654, id_wykonawcy INT, zawartosc VARCHAR(70), dodatek VARCHAR(70) DEFAULT 'papryczka chilli', id_konsumenta INT, FOREIGN KEY (id_wykonawcy) REFERENCES postac(id_postaci), FOREIGN KEY (id_konsumenta) REFERENCES postac(id_postaci));
INSERT INTO przetwory VALUES (NULL, DEFAULT, 1, 'bigos', DEFAULT, 3);
_____________________________________________________
5.
INSERT INTO postac VALUES (DEFAULT, 'Elrend', 'wiking', '1970-05-12', '50');
INSERT INTO postac VALUES (NULL, 'Gunnar', 'wiking', '1975-07-17', '45');
INSERT INTO postac VALUES (NULL, 'Hjorvarth', 'wiking', '1969-12-09', '50');
INSERT INTO postac VALUES (NULL, 'Mord', 'wiking', '1980-04-10', '40');
INSERT INTO postac VALUES (NULL, 'Sigurd', 'wiking', '1977-02-03', '23');
CREATE TABLE statek (nazwa_statku varchar(50) PRIMARY KEY, rodzaj_statku ENUM('drakkar', 'langskip', 'sneka'), data_wodowania DATE, max_ladownosc DECIMAL(10,2) UNSIGNED);
INSERT INTO statek VALUES ('Smok','drakkar','2005-05-10', 200);
INSERT INTO statek VALUES ('Orzel','langskip','2006-05-10', 500);
ALTER TABLE postac ADD funkcja VARCHAR(40);
UPDATE postac SET funkcja='kapitan' WHERE id_postaci=1;
ALTER TABLE postac ADD statek VARCHAR(40);
ALTER TABLE postac add FOREIGN KEY (statek) REFERENCES statek (nazwa_statku);
UPDATE postac SET statek='Smok' WHERE nazwa = 'Elrend';
UPDATE postac SET statek='Orzel' WHERE nazwa = 'Gunnar';
UPDATE postac SET statek='Smok' WHERE nazwa = 'Hjorvarth';
UPDATE postac SET statek='Orzel' WHERE nazwa = 'Mord';
UPDATE postac SET statek='Orzel' WHERE nazwa = 'Sigurd';
UPDATE postac SET statek='Smok' WHERE nazwa = 'Bjorn';
UPDATE postac SET statek='Smok' WHERE nazwa = 'Drozd';
DELETE FROM izba WHERE nazwa_izby='Spizarnia';
DROP TABLE izba;
____________________________________________________________________________________________________________


LEKCJA 2
1.
DELETE FROM postac WHERE id_postaci > 3 ORDER BY wiek DESC LIMIT 2;
ALTER TABLE walizka DROP FOREIGN KEY walizka_ibfk_1;
ALTER TABLE przetwory DROP FOREIGN KEY przetwory_ibfk_1;
ALTER TABLE przetwory DROP FOREIGN KEY przetwory_ibfk_2;
ALTER TABLE postac MODIFY id_postaci INT NOT NULL;
ALTER TABLE postac DROP PRIMARY KEY;
_____________________________________________________
2.
ALTER TABLE postac ADD pesel char(11);
UPDATE postac SET pesel = '12345678911' WHERE id_postaci = 1;
UPDATE postac SET pesel = '12345678912' WHERE id_postaci = 2;
UPDATE postac SET pesel = '12345678913' WHERE id_postaci = 3;
UPDATE postac SET pesel = '12345678914' WHERE id_postaci = 4;
UPDATE postac SET pesel = '12345678915' WHERE id_postaci = 5;
UPDATE postac SET pesel = '12345678916' WHERE id_postaci = 6;
UPDATE postac SET pesel = '12345678917' WHERE id_postaci = 7;
UPDATE postac SET pesel = '12345678918' WHERE id_postaci = 8;
ALTER TABLE postac MODIFY pesel char(11) PRIMARY KEY;
ALTER TABLE postac MODIFY rodzaj ENUM('wiking', 'ptak', 'kobieta', 'syrena');
INSERT INTO postac VALUES(9, 'Gertruda Nieszczera', 'syrena', '780-01-01', 2020-780, NULL, NULL, 12345678919);
_____________________________________________________
3.
UPDATE postac SET statek = 'Smok' WHERE (nazwa LIKE '%a%' OR nazwa LIKE 'A%' OR nazwa
LIKE '%a') AND nazwa != 'Gertruda Nieszczera' AND nazwa != 'Tesciowa';
UPDATE statek SET max_ladownosc = 0.7*max_ladownosc WHERE data_wodowania BETWEEN '1900-01-01' AND '2000-01-01';
ALTER TABLE postac ADD wiek_wiekszy_niz_1000 ENUM('TAK', 'NIE') DEFAULT (if(wiek>1000, 'TAK', 'NIE'));
UPDATE postac SET wiek_wiekszy_niz_1000 = DEFAULT;
_____________________________________________________
4.
ALTER TABLE postac MODIFY rodzaj ENUM('wiking', 'ptak', 'kobieta', 'syrena', 'waz');
CREATE TABLE marynarz SELECT * FROM postac WHERE statek IS NOT NULL;
ALTER TABLE marynarz MODIFY id_postaci INT PRIMARY KEY;
ALTER TABLE marynarz ADD FOREIGN KEY (pesel) REFERENCES postac(pesel) ON DELETE CASCADE;
ALTER TABLE marynarz ADD FOREIGN KEY (statek) REFERENCES statek(nazwa_statku) ON DELETE SET NULL;
ALTER TABLE postac ADD FOREIGN KEY (statek) REFERENCES marynarz(statek) ON UPDATE CASCADE;
_____________________________________________________
5.
UPDATE marynarz SET statek = NULL;
DELETE FROM postac WHERE rodzaj = 'wiking' ORDER BY wiek DESC LIMIT 1;
DELETE FROM statek;
DROP TABLE statek;
CREATE TABLE zwierz(id INT PRIMARY KEY auto_increment, nazwa VARCHAR(40), wiek INT);
INSERT INTO zwierz VALUES(NULL, 'Drozd', 20);
INSERT INTO zwierz VALUES(NULL, 'Loko', 28);
____________________________________________________________________________________________________________


LEKCJA 3.
1.
CREATE TABLE kreatura AS SELECT * FROM wikingowie.kreatura;
ALTER TABLE kreatura MODIFY idKreatury INT PRIMARY KEY auto_increment;
CREATE TABLE zasob AS SELECT * FROM wikingowie.zasob;
ALTER TABLE zasob MODIFY idZasobu INT PRIMARY KEY;
CREATE TABLE ekwipunek  AS SELECT * FROM wikingowie.ekwipunek;
ALTER TABLE ekwipunek MODIFY idEkwipunku INT PRIMARY KEY;
ALTER TABLE ekwipunek ADD FOREIGN KEY (idKreatury) REFERENCES kreatura(idKreatury);
ALTER TABLE ekwipunek ADD FOREIGN KEY (idZasobu) REFERENCES zasob(idZasobu);
SELECT * FROM zasob;
SELECT * FROM zasob WHERE rodzaj = 'jedzenie';
SELECT idZasobu, ilosc FROM ekwipunek WHERE idKreatury IN(1, 3, 5);
_____________________________________________________
2.
SELECT * FROM kreatura WHERE rodzaj NOT IN ('wiedzma');
SELECT * FROM zasob WHERE waga BETWEEN 2 AND 5;
SELECT * FROM kreatura WHERE (nazwa LIKE '%or%' OR nazwa LIKE '%or' OR nazwa LIKE 'Or%') AND udzwig BETWEEN 30 AND 70;
_____________________________________________________
3.
SELECT * FROM zasob WHERE MONTH(dataPozyskania) BETWEEN 7 AND 8;
SELECT * FROM zasob WHERE rodzaj IS NOT NULL ORDER BY waga;
SELECT * FROM kreatura ORDER BY dataUr LIMIT 5;
_____________________________________________________
4.
SELECT DISTINCT rodzaj FROM zasob;
SELECT CONCAT (nazwa, "-" , rodzaj) AS 'nazwa-rodzaj' FROM kreatura WHERE rodzaj LIKE 'wi%';
SELECT *, ilosc*waga AS wagaCalkowita FROM zasob WHERE YEAR(dataPozyskania) BETWEEN 2000 AND 2007;
_____________________________________________________
5.
SELECT *, 0.7*waga*ilosc AS masaNetto, 0.3*waga*ilosc AS wagaOdpadkow FROM zasob WHERE rodzaj = 'jedzenie';
SELECT * FROM zasob WHERE rodzaj IS NULL;
SELECT DISTINCT rodzaj, nazwa FROM zasob WHERE nazwa LIKE 'Ba%' OR nazwa LIKE '%os' ORDER BY nazwa;
____________________________________________________________________________________________________________


LEKCJA 4.
1.
SELECT AVG(waga ) AS sredniaWagaWikingow FROM kreatura WHERE rodzaj = 'wiking';
SELECT rodzaj, AVG(waga) AS sredniaWaga, COUNT(rodzaj) AS liczbaKreatur FROM kreatura GROUP BY rodzaj;
SELECT rodzaj, AVG(2020-YEAR(dataUr)) AS sredniWiek FROM kreatura GROUP BY rodzaj;
_____________________________________________________
2.
SELECT rodzaj, SUM(waga*ilosc) AS sumaWag FROM zasob GROUP BY rodzaj;
SELECT nazwa, SUM(waga*ilosc)/SUM(ilosc) AS sredniaWaga FROM zasob GROUP BY nazwa HAVING SUM(ilosc) >= 4 AND SUM(waga*ilosc) > 10;
SELECT DISTINCT rodzaj, COUNT(nazwa) AS ileRoznychNazw FROM zasob GROUP BY rodzaj HAVING MIN(ilosc) > 1;
_____________________________________________________
3.
SELECT nazwa, idEkwipunku, ilosc AS iloscZasobow FROM kreatura JOIN ekwipunek ON kreatura.idKreatury = ekwipunek.idKreatury;
SELECT k.nazwa AS kreatura, z.nazwa AS nazwaZasobu FROM (zasob z JOIN ekwipunek e ON z.idZasobu = e.idZasobu) JOIN kreatura k ON k.idKreatury = e.idKreatury;
SELECT nazwa, idEkwipunku FROM kreatura LEFT OUTER JOIN ekwipunek USING(idKreatury) WHERE idEkwipunku IS NULL;
_____________________________________________________
4.
SELECT k.nazwa AS kreatura, z.nazwa AS nazwaZasobu FROM kreatura k JOIN (zasob z JOIN ekwipunek e ON z.idZasobu = e.idZasobu) ON k.idKreatury = e.idKreatury WHERE k.rodzaj = 'wiking' AND YEAR(k.dataUr) BETWEEN 1670 AND 1679;
SELECT k.nazwa AS kreatura, z.nazwa AS nazwaZasobu FROM kreatura k JOIN (zasob z JOIN ekwipunek e ON z.idZasobu = e.idZasobu) ON k.idKreatury = e.idKreatury WHERE z.rodzaj = 'jedzenie' ORDER BY dataUr DESC LIMIT 5;
SELECT CONCAT(a.nazwa, " - ", b.nazwa) AS nazwy FROM kreatura a JOIN kreatura b WHERE b.idKreatury - a.idKreatury = 5;
_____________________________________________________
5.
SELECT k.rodzaj, SUM(z.waga*z.ilosc)/SUM(z.ilosc) AS sredniaWagaZasobow FROM kreatura k JOIN (zasob z JOIN ekwipunek e ON z.idZasobu = e.idZasobu) ON k.idKreatury = e.Idkreatury GROUP BY k.rodzaj HAVING k.rodzaj NOT IN ('waz', 'malpa') AND SUM(e.ilosc) < 30;
SELECT rodzaj, MAX(CONCAT(dataUr, " ", nazwa)) AS najmlodszaKreatura, MIN(CONCAT(dataUr, " ", nazwa)) AS najstarszaKreatura FROM kreatura GROUP BY rodzaj;
____________________________________________________________________________________________________________


LEKCJA 5.
1.
CREATE TABLE kreatura AS SELECT * FROM wikingowie.kreatura;
CREATE TABLE etapy_wyprawy AS SELECT * FROM wikingowie.etapy_wyprawy;
CREATE TABLE sektor AS SELECT * FROM wikingowie.sektor;
CREATE TABLE wyprawa AS SELECT * FROM wikingowie.wyprawa;
CREATE TABLE uczestnicy AS SELECT * FROM wikingowie.uczestnicy;
ALTER TABLE uczestnicy ADD PRIMARY KEY (id_wyprawy, id_uczestnika);
ALTER TABLE uczestnicy ADD FOREIGN KEY (id_wyprawy) REFERENCES wyprawa(id_wyprawy);
ALTER TABLE uczestnicy ADD FOREIGN KEY (id_uczestnika) REFERENCES kreatura(idKreatury);
ALTER TABLE etapy_wyprawy MODIFY idEtapu int NOT NULL PRIMARY KEY auto_increment;
ALTER TABLE sektor MODIFY id_sektora int NOT NULL PRIMARY KEY;
ALTER TABLE wyprawa MODIFY id_wyprawy int NOT NULL PRIMARY KEY auto_increment;
ALTER TABLE wyprawa ADD FOREIGN KEY (kierownik) REFERENCES kreatura(idKreatury) ON DELETE CASCADE;
ALTER TABLE etapy_wyprawy ADD FOREIGN KEY (sektor) REFERENCES sektor(id_sektora);
ALTER TABLE etapy_wyprawy ADD FOREIGN KEY (idWyprawy) REFERENCES wyprawa(id_wyprawy);
SELECT nazwa AS brak_wyprawy FROM kreatura LEFT JOIN uczestnicy ON uczestnicy.id_uzestnika = kreatura.idKreatury WHERE id_wyprawy IS NULL;
SELECT w.nazwa, SUM(e.ilosc) AS sumaIlosciEkwipunku FROM wyprawa w JOIN (uczestnicy u JOIN ekwipunek e ON e.idKreatury = u.id_uczestnika) ON w.id_wyprawy = u.id_wyprawy GROUP BY w.nazwa;
_____________________________________________________
2.
SELECT w.nazwa, COUNT(id_uczestnika) AS liczbaUczestnikow, GROUP_CONCAT(" ", k.nazwa) AS nazwyUczesntikow FROM wyprawa w JOIN (uczestnicy u JOIN kreatura k ON u.id_uczestnika = k.idKreatury) ON u.id_wyprawy = w.id_wyprawy GROUP BY w.nazwa;
SELECT e.idEtapu, s.nazwa AS nazwaLokacji, k.nazwa AS kierownik FROM (etapy_wyprawy e JOIN (wyprawa w JOIN kreatura k ON k.idKreatury = w.kierownik) ON e.idWyprawy = w.id_wyprawy) JOIN sektor s ON sektor = s.id_sektora ORDER BY data_rozpoczecia, kolejnosc;
_____________________________________________________
3.
SELECT s.nazwa, IFNULL(COUNT(idWyprawy), 0) AS iloscOdwiedzin FROM sektor s LEFT JOIN etapy_wyprawy ON s.id_sektora = sektor GROUP BY s.nazwa;
SELECT k.nazwa, IF(COUNT(id_wyprawy)>0, 'bral udzial w wyprawie', 'nie bral udzialu w wyprawie') AS udzial_w_wyprawie FROM kreatura k LEFT JOIN uczestnicy ON k.idKreatury = id_uczestnika GROUP BY k.nazwa;
_____________________________________________________
4.
SELECT w.nazwa, SUM(length(dziennik)) AS SumaZnakowDziennika FROM wyprawa w JOIN etapy_wyprawy ON idWyprawy = w.id_wyprawy GROUP BY w.nazwa HAVING(SumaZnakowDziennika < 400);
